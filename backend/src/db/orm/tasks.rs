//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "tasks"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: String,
    pub title: String,
    pub category: String,
    pub content: String,
    pub status: String,
    pub created_at: DateTimeWithTimeZone,
    pub deadline: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Title,
    Category,
    Content,
    Status,
    CreatedAt,
    Deadline,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Text.def(),
            Self::Title => ColumnType::Text.def(),
            Self::Category => ColumnType::Text.def(),
            Self::Content => ColumnType::Text.def(),
            Self::Status => ColumnType::Text.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::Deadline => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl Related<Entity> for Entity {
    fn to() -> RelationDef {
        super::task_dependencies::Relation::Tasks2.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::task_dependencies::Relation::Tasks1.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
