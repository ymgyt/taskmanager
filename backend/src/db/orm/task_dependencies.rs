//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "task_dependencies"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub src: String,
    pub dependent: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Src,
    Dependent,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Src,
    Dependent,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Tasks2,
    Tasks1,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Src => ColumnType::Text.def(),
            Self::Dependent => ColumnType::Text.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Tasks2 => Entity::belongs_to(super::tasks::Entity)
                .from(Column::Dependent)
                .to(super::tasks::Column::Id)
                .into(),
            Self::Tasks1 => Entity::belongs_to(super::tasks::Entity)
                .from(Column::Src)
                .to(super::tasks::Column::Id)
                .into(),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
