//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "tasks"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub uuid: String,
    pub project_uuid: String,
    pub title: String,
    pub category: String,
    pub content: String,
    pub created_at: DateTimeWithTimeZone,
    pub deladline: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Uuid,
    ProjectUuid,
    Title,
    Category,
    Content,
    CreatedAt,
    Deladline,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Uuid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Projects,
    TagTask,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Uuid => ColumnType::String(Some(50u32)).def(),
            Self::ProjectUuid => ColumnType::String(Some(50u32)).def(),
            Self::Title => ColumnType::Text.def(),
            Self::Category => ColumnType::Char(Some(30u32)).def(),
            Self::Content => ColumnType::Text.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::Deladline => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Projects => Entity::belongs_to(super::projects::Entity)
                .from(Column::ProjectUuid)
                .to(super::projects::Column::Uuid)
                .into(),
            Self::TagTask => Entity::has_many(super::tag_task::Entity).into(),
        }
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::tag_task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TagTask.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
